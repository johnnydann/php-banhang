@extends('admin.dashboard')
@section('page_title', 'Qu·∫£n l√Ω s·∫£n ph·∫©m')
@section('products')
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
    <div class="flex justify-between items-center mb-6 border-b pb-4">
        <div>
            <h2 class="text-2xl font-bold text-brand-600 dark:text-brand-400">üõí Danh s√°ch s·∫£n ph·∫©m</h2>
            <p class="text-gray-500 text-sm mt-1">Qu·∫£n l√Ω s·∫£n ph·∫©m trong h·ªá th·ªëng</p>
        </div>
        <div class="flex items-center space-x-4">
            <!-- Thanh t√¨m ki·∫øm -->
            <div class="relative">
                <input id="searchProduct" type="text" placeholder="üîç T√¨m s·∫£n ph·∫©m" 
                    class="w-64 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500" 
                    autocomplete="off">
                <!-- Ph·∫ßn hi·ªÉn th·ªã g·ª£i √Ω -->
                <div id="suggestion-container" class="mt-2 flex flex-wrap gap-2 hidden"></div>
            </div>
            
            <!-- N√∫t Th√™m S·∫£n Ph·∫©m -->
            <button id="openAddProductForm"
                class="bg-gradient-to-r from-green-500 to-green-600 text-black px-5 py-2 rounded-full shadow hover:from-green-600 hover:to-green-700 transition duration-200">
                + Th√™m s·∫£n ph·∫©m
            </button>
        </div>
    </div>


    <!-- Form th√™m s·∫£n ph·∫©m -->
    <div id="addProductForm" class="hidden bg-orange-50 dark:bg-gray-900 p-6 rounded-lg mb-6 border border-dashed border-brand-300" enctype="multipart/form-data">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input id="productName" type="text" placeholder="üç∫ T√™n s·∫£n ph·∫©m"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500" />
            <input id="productPrice" type="number" placeholder="üí∏ Gi√°(USD)"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500" />
            <input id="productQuantity" type="number" placeholder="üì¶ S·ªë l∆∞·ª£ng"
                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500" />
            <div>
                <select id="productCategory"
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500">
                    <option value="">üìö Ch·ªçn danh m·ª•c</option>
                    <!-- Categories will be loaded here -->
                </select>
            </div>
            <div class="col-span-2">
                <textarea id="productDesc" placeholder="üñä M√¥ t·∫£..."
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-brand-500"></textarea>
            </div>
            <div class="col-span-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">üñºÔ∏è H√¨nh ·∫£nh s·∫£n ph·∫©m</label>
                <div class="flex items-center gap-4">
                    <input id="productImage" type="file" accept="image/*" class="hidden" />
                    <button type="button" onclick="document.getElementById('productImage').click()"
                        class="bg-gray-100 px-3 py-1 rounded border text-sm hover:bg-gray-200">
                        üìÅ Ch·ªçn ·∫£nh
                    </button>
                    <img id="productImagePreview" src="" alt="Preview ·∫£nh"
                        class="w-20 h-20 object-contain border rounded shadow hidden" />
                </div>
            </div>
        </div>
        <div class="text-right mt-4">
            <button id="closeAddProductForm"
                class="bg-brand-500 text-red px-5 py-2 rounded-lg hover:bg-brand-600 transition shadow"
                style="color: red;">
                ‚úñ ƒê√≥ng
            </button>
            <button id="submitAddProduct"
                class="bg-brand-500 text-black px-5 py-2 rounded-lg hover:bg-brand-600 transition shadow">
                ‚úÖ Th√™m s·∫£n ph·∫©m
            </button>
        </div>
    </div>


    <div id="product-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- JS render here -->
    </div>

    <!-- Modal Xem chi ti·∫øt s·∫£n ph·∫©m -->
    <div id="viewProductModal"
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[100] hidden"
        onclick="hideViewProductModal()">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-lg w-full text-left animate-fadeIn"
            onclick="event.stopPropagation()">
            <h3 class="text-2xl font-bold text-blue-600 mb-2">üëÅÔ∏è Chi ti·∫øt s·∫£n ph·∫©m</h3>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-1"><strong>T√™n s·∫£n ph·∫©m:</strong> <span id="viewProductName"></span></p>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-1"><strong>Gi√°:</strong> <span id="viewProductPrice"></span></p>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-1"><strong>S·ªë l∆∞·ª£ng:</strong> <span id="viewProductQuantity"></span></p>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-1"><strong>Danh m·ª•c:</strong> <span id="viewProductCategory"></span></p>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-1"><strong>M√¥ t·∫£:</strong></p>
            <div id="viewProductDesc" class="mb-4">
                <span id="viewProductDescContent"></span>
            </div>
            <div class="text-center mt-4">
                <img id="viewProductImage" src="" alt="·∫¢nh s·∫£n ph·∫©m"
                    class="max-w-full max-h-60 object-contain border rounded shadow">
            </div>
            <div class="text-right mt-4">
                <button onclick="hideViewProductModal()"
                    class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                    ‚úñ ƒê√≥ng
                </button>
            </div>
        </div>
    </div>





    <div id="updateProductModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[100] hidden" onclick="hideUpdateProductModal()">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-sm w-full text-left animate-fadeIn" onclick="event.stopPropagation()">
            <h3 class="text-xl font-bold text-blue-600 mb-4">üìù C·∫≠p nh·∫≠t s·∫£n ph·∫©m</h3>
            <input id="updateProductName" type="text" placeholder="T√™n s·∫£n ph·∫©m" class="w-full mb-3 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500">
            <input id="updateProductPrice" type="number" placeholder="Gi√°(USD)" class="w-full mb-3 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500">
            <input id="updateProductQuantity" type="number" placeholder="S·ªë l∆∞·ª£ng" class="w-full mb-3 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500">
            <select id="updateProductCategory" class="w-full mb-3 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500"></select>
            <textarea id="updateProductDesc" placeholder="M√¥ t·∫£" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 mb-3"></textarea>
            <div class="flex items-center gap-4">
                <input id="updateProductImage" type="file" accept="image/*" class="hidden"
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500" />
                <button type="button" onclick="document.getElementById('updateProductImage').click()"
                    class="bg-gray-100 px-3 py-1 rounded border text-sm hover:bg-gray-200">
                    üìÅ Ch·ªçn ·∫£nh
                </button>
                <img id="currentProductImagePreview" src="" alt="·∫¢nh hi·ªán t·∫°i"
                    class="w-20 h-20 object-contain border rounded shadow" />
            </div>
            <span id="updateProductImageName" class="text-sm text-gray-500 block mt-1 ml-1"></span>
            <div class="flex justify-end gap-2">
                <button onclick="hideUpdateProductModal()" class="px-4 py-2 rounded bg-gray-300 hover:bg-gray-400 text-black">‚úñ H·ªßy</button>
                <button onclick="submitUpdateProduct()" class="px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white">‚úÖ L∆∞u</button>
            </div>
        </div>
    </div>

    <!-- Modal X√°c nh·∫≠n xo√° s·∫£n ph·∫©m -->
    <div id="deleteProductModal"
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[100] hidden"
        onclick="hideDeleteProductModal()">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-sm text-center animate-fadeIn"
            onclick="event.stopPropagation()">
            <h3 class="text-xl font-bold text-red-600 mb-2">‚ö†Ô∏è Xo√° s·∫£n ph·∫©m</h3>
            <p class="text-sm text-gray-600 dark:text-gray-300 mb-4">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° s·∫£n ph·∫©m n√†y kh√¥ng?</p>
            <div class="flex justify-center gap-4">
                <button onclick="hideDeleteProductModal()"
                    class="bg-gray-300 hover:bg-gray-400 text-black px-4 py-2 rounded">
                    ‚úñ H·ªßy
                </button>
                <button onclick="confirmDeleteProduct()"
                    class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
                    üóëÔ∏è Xo√°
                </button>
            </div>
        </div>
    </div>

    <div id="pagination" class="flex justify-center gap-2 mt-6">
        <!-- Ph√¢n trang s·∫Ω ƒë∆∞·ª£c render t·∫°i ƒë√¢y -->
    </div>



    <!-- Success Modal -->
    <div id="successProductModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[100] hidden">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-sm text-center animate-fadeIn">
            <h3 class="text-2xl font-bold text-green-600 mb-2">üéâ Th√™m th√†nh c√¥ng!</h3>
            <p class="text-gray-600 dark:text-gray-300 text-sm">S·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.</p>
            <button onclick="hideSuccessProductModal()"
                class="mt-4 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition">
                ‚úñ ƒê√≥ng
            </button>
        </div>
    </div>
</div>

<script>
    let currentUpdateProductId = null;
    let deleteProductId = null;
    let currentPage = 1;
    const pageSize = 6;  // 6 s·∫£n ph·∫©m m·ªói trang


    // Load categories when page loads
    document.addEventListener('DOMContentLoaded', function() {
        fetchCategories();
        fetchProducts();
    });

    document.getElementById('openAddProductForm').onclick = () => {
        document.getElementById('addProductForm').classList.toggle('hidden');
    };

    // ƒê√≥ng form th√™m s·∫£n ph·∫©m
    document.getElementById('closeAddProductForm').onclick = () => {
        document.getElementById('addProductForm').classList.add('hidden');
    };

    function showSuccessProductModal() {
        document.getElementById('successProductModal').classList.remove('hidden');
    }

    function hideSuccessProductModal() {
        document.getElementById('successProductModal').classList.add('hidden');
    }

    // Function to fetch categories
    function fetchCategories() {
        fetch('/api/categories/getall')
            .then(res => res.json())
            .then(categories => {
                const select = document.getElementById('productCategory');
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    select.appendChild(option);
                });
            });
    }

    document.getElementById('productImage').addEventListener('change', function () {
        const file = this.files[0];
        const fileName = document.getElementById('productImageName');
        const preview = document.getElementById('productImagePreview');

        if (file) {
            preview.src = URL.createObjectURL(file);
            preview.classList.remove('hidden');
        } else {
            fileName.textContent = '';
            preview.classList.add('hidden');
        }
    });


    document.getElementById('submitAddProduct').onclick = async () => {
        const name = document.getElementById('productName').value;
        const price = parseFloat(document.getElementById('productPrice').value);
        const quantity = parseInt(document.getElementById('productQuantity').value);
        const description = document.getElementById('productDesc').value;
        const category_id = parseInt(document.getElementById('productCategory').value);
        const imageFile = document.getElementById('productImage').files[0];

        if (!name || isNaN(price) || isNaN(quantity) || isNaN(category_id)) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (T√™n, Gi√°, S·ªë l∆∞·ª£ng, Danh m·ª•c)');
            return;
        }

        const formData = new FormData();
        formData.append('name', name);
        formData.append('price', price);
        formData.append('quantity', quantity);
        formData.append('description', description);
        formData.append('category_id', category_id);
        if (imageFile) {
            formData.append('imageFile', imageFile);
        }

        const response = await fetch('/api/products/add', {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
            },
            body: formData
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server');
        }

        // Show success modal
        showSuccessProductModal();

        // Reset the form after successful product addition
        resetForm();

        // Fetch products again to display the newly added one
        fetchProducts();
    };

    // Function to reset the form
    function resetForm() {
        document.getElementById('productName').value = '';
        document.getElementById('productPrice').value = '';
        document.getElementById('productQuantity').value = '';
        document.getElementById('productDesc').value = '';
        document.getElementById('productCategory').selectedIndex = 0;  // Reset category dropdown

        // Reset file input and hide preview
        document.getElementById('productImage').value = '';  // Clear file input
        document.getElementById('productImagePreview').classList.add('hidden'); // Hide the image preview
    }



    function fetchProducts() {
        fetch(`/api/products/getall?pageNumber=${currentPage}`)
            .then(res => res.json())
            .then(data => {
                const list = document.getElementById('product-list');
                list.innerHTML = data.products.map(product => {
                    const priceUSD = product.price;
                    return`
                    <div class="p-4 border rounded shadow bg-white dark:bg-gray-700">
                        <h3 class="font-bold text-brand-600 dark:text-brand-400">${product.name}</h3>
                        <p class="text-sm text-gray-500">üíµ Gi√°: $${Number(priceUSD).toLocaleString()}</p>
                        <p class="text-sm text-gray-500">S·ªë l∆∞·ª£ng: ${product.quantity}</p>
                        <p class="text-sm text-gray-500">Danh m·ª•c: ${product.category?.name || 'Kh√¥ng c√≥'}</p>
                        <p class="text-sm text-gray-400 product-description">
                            ${product.description.length > 10 ? 
                                product.description.slice(0, 50) + '... <a href="javascript:void(0);" onclick="viewProduct(' + product.id + ')">Xem th√™m</a>' : 
                                product.description}
                        </p>

                        <div class="flex justify-center">
                            <img src="${product.image_url?.startsWith('/') ? product.image_url : '/' + product.image_url}"
                                alt="${product.name}" class="max-w-sm max-h-48 object-contain rounded mb-3">
                        </div>
                        <div class="mt-2 flex gap-2">
                            <button onclick="viewProduct(${product.id})" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm transition">
                                üëÅ Xem
                            </button>
                            <button onclick="deleteProduct(${product.id})" class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm transition">
                                üóë X√≥a
                            </button>
                            <button onclick="openUpdateProductModal(${product.id})" class="px-3 py-1 bg-yellow-400 text-black rounded hover:bg-yellow-500 text-sm transition">
                                ‚úèÔ∏è S·ª≠a
                            </button>
                        </div>
                    </div>
                `}).join('');
                renderPagination(data.total_pages);
            });
    }


    // H√†m render ph√¢n trang
    function renderPagination(totalPages) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';  // X√≥a c√°c n√∫t ph√¢n trang c≈©

        // N√∫t l√πi trang
        if (currentPage > 1) {
            const prevButton = document.createElement('button');
            prevButton.innerText = '‚Üê';
            prevButton.className = 'px-3 py-1 rounded bg-gray-300 hover:bg-gray-400';
            prevButton.onclick = () => {
                currentPage--;
                fetchProducts();
            };
            pagination.appendChild(prevButton);
        }

        // C√°c n√∫t trang
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.innerText = i;
            pageButton.className = `px-3 py-1 rounded ${i === currentPage ? 'bg-brand-600 text-black' : 'bg-gray-300 hover:bg-gray-400'}`;
            pageButton.onclick = () => {
                currentPage = i;
                fetchProducts();
            };
            pagination.appendChild(pageButton);
        }

        // N√∫t ti·∫øn trang
        if (currentPage < totalPages) {
            const nextButton = document.createElement('button');
            nextButton.innerText = '‚Üí';
            nextButton.className = 'px-3 py-1 rounded bg-gray-300 hover:bg-gray-400';
            nextButton.onclick = () => {
                currentPage++;
                fetchProducts();
            };
            pagination.appendChild(nextButton);
        }
    }


    // H√†m hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m khi nh·∫•n v√†o "Xem th√™m"
    function viewProduct(id) {
        fetch(`/api/products/getproductbyid/${id}`)
            .then(res => res.json())
            .then(product => {
                if (!product) {
                    alert('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!');
                    return;
                }
                // Ki·ªÉm tra xem c√≥ th√¥ng tin tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß kh√¥ng
                if (product.name && product.price && product.quantity) {
                    document.getElementById('viewProductName').innerText = product.name;
                    const priceUSD = product.price;
                    document.getElementById('viewProductPrice').innerText = `$${Number(priceUSD).toLocaleString()}`;
                    document.getElementById('viewProductQuantity').innerText = product.quantity;
                    document.getElementById('viewProductCategory').innerText = product.category?.name || 'Kh√¥ng c√≥';
                    document.getElementById('viewProductDescContent').innerText = product.description || 'Ch∆∞a c√≥ m√¥ t·∫£';
                    const imageUrl = product.image_url?.startsWith('/') ? product.image_url : '/' + product.image_url;
                    document.getElementById('viewProductImage').src = imageUrl;
                    document.getElementById('viewProductModal').classList.remove('hidden');
                } else {
                    alert('D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng ƒë·∫ßy ƒë·ªß!');
                }
            })
            .catch(err => {
                console.error('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', err);
                alert('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m!');
            });
    }





    // H√†m ƒë√≥ng modal chi ti·∫øt s·∫£n ph·∫©m
    function hideViewProductModal() {
        document.getElementById('viewProductModal').classList.add('hidden');
    }


    function openUpdateProductModal(id) {
        fetch(`/api/products/getproductbyid/${id}`)
            .then(res => res.json())
            .then(product => {
                currentUpdateProductId = id;
                
                // Reset file input v√† preview
                const fileInput = document.getElementById('updateProductImage');
                fileInput.value = ''; // Reset file input
                document.getElementById('updateProductImageName').textContent = '';
                
                // ƒê·∫∑t gi√° tr·ªã c√°c tr∆∞·ªùng
                document.getElementById('updateProductName').value = product.name;
                document.getElementById('updateProductPrice').value = product.price;
                document.getElementById('updateProductQuantity').value = product.quantity;
                document.getElementById('updateProductDesc').value = product.description || '';
                
                const imagePreview = document.getElementById('currentProductImagePreview');
                if (product.image_url) {
                    imagePreview.src = product.image_url.startsWith('/') ? product.image_url : '/' + product.image_url;
                    imagePreview.style.display = 'block';
                } else {
                    imagePreview.style.display = 'none';
                }

                // Load categories
                const catSelect = document.getElementById('updateProductCategory');
                catSelect.innerHTML = '';
                fetch('/api/categories/getall')
                    .then(res => res.json())
                    .then(categories => {
                        categories.forEach(category => {
                            const option = document.createElement('option');
                            option.value = category.id;
                            option.textContent = category.name;
                            if (category.id === product.category_id) option.selected = true;
                            catSelect.appendChild(option);
                        });
                    });

                document.getElementById('updateProductModal').classList.remove('hidden');
            });
    }

    function hideUpdateProductModal() {
            document.getElementById('updateProductImage').value = '';
            document.getElementById('updateProductModal').classList.add('hidden');
        }

        document.getElementById('updateProductImage').addEventListener('change', function () {
        const file = this.files[0];
        const fileName = document.getElementById('updateProductImageName');
        if (file) {
            // C·∫≠p nh·∫≠t preview n·∫øu c·∫ßn
            const preview = document.getElementById('currentProductImagePreview');
            preview.src = URL.createObjectURL(file);
        } else {
            fileName.textContent = '';
        }
    });


    function submitUpdateProduct() {
        const formData = new FormData();
        formData.append('name', document.getElementById('updateProductName').value);
        formData.append('price', document.getElementById('updateProductPrice').value);
        formData.append('quantity', document.getElementById('updateProductQuantity').value);
        formData.append('description', document.getElementById('updateProductDesc').value);
        formData.append('category_id', document.getElementById('updateProductCategory').value);

        // Ch·ªâ th√™m imageFile n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn file m·ªõi
        const imageFile = document.getElementById('updateProductImage').files[0];
        if (imageFile) {
            formData.append('imageFile', imageFile);
        }

        fetch(`/api/products/update/${currentUpdateProductId}`, {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('access_token')
            },
            body: formData
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                fetchProducts();
                hideUpdateProductModal();
            } else {
                alert(data.message || 'Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c s·∫£n ph·∫©m');
            }
        })
        .catch(err => alert('L·ªói khi c·∫≠p nh·∫≠t: ' + err));
    }

    // H√†m hi·ªÉn th·ªã modal x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
    function deleteProduct(id) {
        deleteProductId = id;
        document.getElementById('deleteProductModal').classList.remove('hidden');
    }

    // H√†m ƒë√≥ng modal x√≥a s·∫£n ph·∫©m
    function hideDeleteProductModal() {
        document.getElementById('deleteProductModal').classList.add('hidden');
    }

    // H√†m x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
    function confirmDeleteProduct() {
        if (!deleteProductId) return;

        fetch(`/api/products/delete/${deleteProductId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    fetchProducts(); // Refresh the product list
                    hideDeleteProductModal();
                } else {
                    alert(data.message || 'Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m.');
                }
            })
            .catch(err => alert('L·ªói khi xo√°: ' + err));
    }
</script>
<!-- H√†m t√¨m ki·∫øm s·∫£n ph·∫©m -->
<script>
// L·∫Øng nghe s·ª± ki·ªán nh·∫≠p li·ªáu tr√™n thanh t√¨m ki·∫øm
document.getElementById('searchProduct').addEventListener('input', function() {
    const query = this.value.trim();

    if (query.length > 0) {
        fetchSuggestions(query);
    } else {
        clearSuggestions();
        fetchProducts(); // T·∫£i l·∫°i danh s√°ch s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ query
    }
});

// G·ª≠i y√™u c·∫ßu API t√¨m ki·∫øm v√† hi·ªÉn th·ªã k·∫øt qu·∫£ g·ª£i √Ω
function fetchSuggestions(query) {
    fetch(`/api/suggest?term=${query}`)
        .then(res => res.json())
        .then(suggestions => {
            if (suggestions.length > 0) {
                showSuggestions(suggestions);
            } else {
                clearSuggestions();
            }
        })
        .catch(err => {
            console.error('Error fetching suggestions:', err);
        });
}

// Hi·ªÉn th·ªã danh s√°ch c√°c g·ª£i √Ω t√™n s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng danh s√°ch d·ªçc
function showSuggestions(suggestions) {
    const suggestionContainer = document.getElementById('suggestion-container');
    suggestionContainer.classList.remove('hidden');  // Hi·ªÉn th·ªã container g·ª£i √Ω

    // Hi·ªÉn th·ªã c√°c g·ª£i √Ω d∆∞·ªõi d·∫°ng danh s√°ch d·ªçc
    suggestionContainer.innerHTML = `
        <ul class="bg-white border border-gray-300 shadow-lg rounded-lg w-64">
            ${suggestions.map(suggestion => `
                <li class="suggestion-item px-4 py-2 text-gray-800 hover:bg-gray-100 cursor-pointer"
                    onclick="selectSuggestion('${suggestion}')">
                    ${suggestion}
                </li>
            `).join('')}
        </ul>
    `;
}

// Ch·ªçn m·ªôt g·ª£i √Ω v√† th·ª±c hi·ªán t√¨m ki·∫øm
function selectSuggestion(suggestion) {
    document.getElementById('searchProduct').value = suggestion;
    searchProducts(suggestion); // Th·ª±c hi·ªán t√¨m ki·∫øm khi ch·ªçn m·ªôt g·ª£i √Ω
    clearSuggestions(); // ·∫®n danh s√°ch g·ª£i √Ω
}

// Th·ª±c hi·ªán t√¨m ki·∫øm s·∫£n ph·∫©m
function searchProducts(query) {
    fetch(`/api/search?query=${query}`)
        .then(res => res.json())
        .then(products => {
            displayProducts(products); // Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c
        })
        .catch(err => {
            console.error('Error fetching products:', err);
        });
}

// Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c
function displayProducts(products) {
    const productList = document.getElementById('product-list');
    productList.innerHTML = products.map(product =>{
        const priceUSD = product.price;
        return `
        <div class="p-4 border rounded shadow bg-white dark:bg-gray-700">
            <h3 class="font-bold text-brand-600 dark:text-brand-400">${product.name}</h3>
            <p class="text-sm text-gray-500">üíµ Gi√°: $${Number(priceUSD).toLocaleString()}</p>
            <p class="text-sm text-gray-500">S·ªë l∆∞·ª£ng: ${product.quantity}</p>
            <p class="text-sm text-gray-500">Danh m·ª•c: ${product.category?.name || 'Kh√¥ng c√≥'}</p>
            <div class="flex justify-center">
                <img src="${product.image_url?.startsWith('/') ? product.image_url : '/' + product.image_url}"
                    alt="${product.name}" class="max-w-sm max-h-48 object-contain rounded mb-3">
            </div>
            <div class="mt-2 flex gap-2">
                <button onclick="viewProduct(${product.id})" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm transition">
                    üëÅ Xem
                </button>
                <button onclick="deleteProduct(${product.id})" class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm transition">
                    üóë X√≥a
                </button>
                <button onclick="openUpdateProductModal(${product.id})" class="px-3 py-1 bg-yellow-400 text-black rounded hover:bg-yellow-500 text-sm transition">
                    ‚úèÔ∏è S·ª≠a
                </button>
            </div>
        </div>
    `}).join('');
}

// X√≥a c√°c g·ª£i √Ω khi ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨
function clearSuggestions() {
    const suggestionContainer = document.getElementById('suggestion-container');
    if (suggestionContainer) {
        suggestionContainer.innerHTML = '';
        suggestionContainer.classList.add('hidden');
    }
}
</script>
@endsection