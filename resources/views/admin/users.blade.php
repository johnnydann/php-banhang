@extends('admin.dashboard')

@section('page_title', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng')

@section('users')
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
    <div class="flex justify-between items-center mb-6 border-b pb-4">
        <div>
            <h2 class="text-2xl font-bold text-brand-600 dark:text-brand-400">üë§ Danh s√°ch ng∆∞·ªùi d√πng</h2>
            <p class="text-gray-500 text-sm mt-1">Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng, quy·ªÅn truy c·∫≠p v√† c√°c h√†nh ƒë·ªông nh∆∞ c·∫•m, x√≥a ng∆∞·ªùi d√πng.</p>
        </div>
    </div>


    <!-- Danh s√°ch ng∆∞·ªùi d√πng -->
    <div id="user-list" class="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
        <!-- JS render here -->
    </div>

    <!-- Modal Xem chi ti·∫øt ng∆∞·ªùi d√πng -->
    <div id="viewUserModal"
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[100] hidden"
        onclick="hideViewUserModal()">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-xl max-w-lg w-full text-left animate-fadeIn"
            onclick="event.stopPropagation()">
            <h3 class="text-2xl font-bold text-blue-600 mb-4">üë§ Chi ti·∫øt ng∆∞·ªùi d√πng</h3>

            <!-- Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-2"><strong>T√™n ng∆∞·ªùi d√πng:</strong>
                <span id="viewUserName" class="text-xl font-semibold"></span>
            </p>

            <!-- Hi·ªÉn th·ªã email -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-2"><strong>Email:</strong>
                <span id="viewUserEmail" class="text-xl font-semibold"></span>
            </p>

            <!-- Hi·ªÉn th·ªã s·ªë ƒëi·ªán tho·∫°i -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-2"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong>
                <span id="viewUserPhone" class="text-xl font-semibold"></span>
            </p>

            <!-- Hi·ªÉn th·ªã vai tr√≤ -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-2"><strong>Vai tr√≤:</strong>
                <span id="viewUserRole" class="text-xl font-semibold"></span>
            </p>

            <!-- Hi·ªÉn th·ªã ng√†y t·∫°o t√†i kho·∫£n -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-2"><strong>Ng√†y t·∫°o:</strong>
                <span id="viewUserCreatedAt" class="text-xl font-semibold"></span>
            </p>

            <!-- Hi·ªÉn th·ªã tr·∫°ng th√°i c·∫•m ng∆∞·ªùi d√πng -->
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-4"><strong>Tr·∫°ng th√°i c·∫•m:</strong>
                <span id="viewUserBannedUntil" class="text-xl font-semibold"></span>
            </p>

            <!-- ƒê√≥ng modal -->
            <div class="text-right mt-4">
                <button onclick="hideViewUserModal()"
                    class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                    ‚úñ ƒê√≥ng
                </button>
            </div>
        </div>
    </div>

    <!-- Modal X√°c nh·∫≠n X√≥a -->
    <div id="deleteConfirmModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-md">
            <h3 class="text-xl font-bold text-brand-600 dark:text-brand-400 mb-4">X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng</h3>
            <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?</p>
            <div class="flex gap-4 mt-6">
                <button id="confirmDelete" class="bg-red-600 text-white px-5 py-2 rounded-lg hover:bg-red-700 transition">X√≥a</button>
                <button id="cancelDelete" class="bg-gray-300 text-black px-5 py-2 rounded-lg hover:bg-gray-400 transition">H·ªßy</button>
            </div>
        </div>
    </div>
    <!-- Pagination -->
    <div id="pagination" class="flex justify-center gap-2 mt-6"></div>
</div>

<script>
    // Fetch danh s√°ch ng∆∞·ªùi d√πng
    fetchUsers();
    let userIdToDelete = null; // Bi·∫øn ƒë·ªÉ l∆∞u id ng∆∞·ªùi d√πng c·∫ßn x√≥a
    let currentPage = 1;
    const pageSize = 6;
    let usersData = [];

    // Fetch user data
    function fetchUsers() {
        fetch('/api/admin/getall', {
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                // L·ªçc b·ªè Admin
                usersData = data.filter(user => user.role !== 'admin');
                renderPage(currentPage);
                renderPagination();
            })
            .catch(error => {
                console.error('Error fetching users:', error);
            });
    }

    function renderPage(page) {
        const list = document.getElementById('user-list');
        const start = (page - 1) * pageSize;
        const end = start + pageSize;
        const sliced = usersData.slice(start, end);

        list.innerHTML = sliced.map(user => `
            <div class="p-4 bg-white dark:bg-gray-700 rounded-xl shadow border border-gray-200 dark:border-gray-600 hover:shadow-md transition relative">
                <h3 class="text-lg font-bold text-brand-600 dark:text-brand-400 mb-1">${user.name}</h3>
                <p class="text-sm text-gray-500">Email: <span class="font-mono">${user.email}</span></p>
                <div class="flex gap-2 mt-4">
                    <button onclick="viewUser(${user.id})" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm transition">üëÅÔ∏è Xem</button>
                    <button onclick="showDeleteConfirmModal(${user.id})" class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm transition">üóëÔ∏è X√≥a</button>
                    <button onclick="openUpdateModal(${user.id})" class="px-3 py-1 bg-yellow-400 text-black rounded hover:bg-yellow-500 text-sm transition">‚úèÔ∏è S·ª≠a</button>
                    ${user.banned_until ? `
                        <button onclick="unbanUser(${user.id})" class="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm transition">‚úÖ Unban</button>
                    ` : `
                        <button onclick="banUser(${user.id})" class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm transition">üö´ Ban</button>
                    `}
                </div>
            </div>
        `).join('');
    }

    // Ban user
    function banUser(userId) {
        fetch(`/api/admin/ban/${userId}`, {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                    fetchUsers(); // Refresh danh s√°ch ng∆∞·ªùi d√πng sau khi ban
            })
            .catch(error => {
                console.error('Error banning user:', error);
            });
    }

    // Unban user
    function unbanUser(userId) {
        fetch(`/api/admin/unban/${userId}`, {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                    fetchUsers(); // Refresh danh s√°ch ng∆∞·ªùi d√πng sau khi unban
            })
            .catch(error => {
                console.error('Error unbanning user:', error);
            });
    }

    // Pagination
    function renderPagination() {
        const totalPages = Math.ceil(usersData.length / pageSize);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const btn = document.createElement('button');
            btn.innerText = i;
            btn.className = `px-3 py-1 rounded border ${i === currentPage ? 'bg-brand-600 text-black' : 'bg-gray-300 hover:bg-gray-400'}`;
            btn.onclick = () => {
                currentPage = i;
                renderPage(currentPage);
                renderPagination();
            };
            pagination.appendChild(btn);
        }
    }

    function viewUser(id) {
        fetch(`/api/admin/getbyId/${id}`, {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                'Content-Type': 'application/json'
            }
        })
        .then(res => res.json())
        .then(user => {
            if (!user) {
                alert('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!');
                return;
            }

            // Ki·ªÉm tra v√† ƒëi·ªÅn th√¥ng tin v√†o modal
            document.getElementById('viewUserName').innerText = user.name;
            document.getElementById('viewUserEmail').innerText = user.email;
            document.getElementById('viewUserPhone').innerText = user.phone_number || 'Ch∆∞a c·∫≠p nh·∫≠t';
            document.getElementById('viewUserRole').innerText = user.role || 'Ch∆∞a c·∫≠p nh·∫≠t';
            document.getElementById('viewUserCreatedAt').innerText = new Date(user.created_at).toLocaleDateString();
            document.getElementById('viewUserBannedUntil').innerText = user.banned_until ? 
                new Date(user.banned_until).toLocaleDateString() : 'Kh√¥ng b·ªã c·∫•m';

            // Hi·ªÉn th·ªã modal
            document.getElementById('viewUserModal').classList.remove('hidden');
        })
        .catch(err => {
            console.error('L·ªói khi l·∫•y chi ti·∫øt ng∆∞·ªùi d√πng:', err);
            alert('L·ªói khi l·∫•y chi ti·∫øt ng∆∞·ªùi d√πng!');
        });
    }

    // H√†m ƒë√≥ng modal chi ti·∫øt ng∆∞·ªùi d√πng
    function hideViewUserModal() {
        document.getElementById('viewUserModal').classList.add('hidden');
    }



    // H√†m ƒë·ªÉ hi·ªÉn th·ªã modal x√°c nh·∫≠n x√≥a
    function showDeleteConfirmModal(userId) {
        userIdToDelete = userId; // L∆∞u id ng∆∞·ªùi d√πng
        const modal = document.getElementById('deleteConfirmModal');
        modal.classList.remove('hidden'); // Hi·ªÉn th·ªã modal
    }

    // H√†m ƒë√≥ng modal
    function closeDeleteConfirmModal() {
        const modal = document.getElementById('deleteConfirmModal');
        modal.classList.add('hidden'); // ·∫®n modal
    }

    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t trong modal
    document.getElementById('confirmDelete').addEventListener('click', deleteUserConfirmed);
    document.getElementById('cancelDelete').addEventListener('click', closeDeleteConfirmModal);

    function deleteUserConfirmed() {
        fetch(`/api/admin/delete/${userIdToDelete}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    fetchUsers(); // Refresh danh s√°ch ng∆∞·ªùi d√πng sau khi x√≥a
                    closeDeleteConfirmModal(); // ƒê√≥ng modal sau khi x√≥a
                } else {
                    alert('Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error deleting user:', error);
            });
    }

    function openUpdateModal(id) {
        fetch(`/api/admin/getbyId/${id}`, {
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success === false) {
                    alert(data.message);
                    return;
                }

                // T·∫°o modal ƒë·ªÉ s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
                modal.innerHTML = `
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-md">
                    <h3 class="text-xl font-bold text-brand-600 dark:text-brand-400 mb-4">C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng</h3>
                    <div class="grid grid-cols-1 gap-4">
                        <input id="updateName" type="text" value="${data.name}" placeholder="T√™n ng∆∞·ªùi d√πng"
                            class="w-full px-4 py-2 rounded-lg border border-gray-500 focus:outline-none focus:ring-2 focus:ring-brand-500" />
                        <input id="updateEmail" type="email" value="${data.email}" placeholder="Email ng∆∞·ªùi d√πng"
                            class="w-full px-4 py-2 rounded-lg border border-gray-500 focus:outline-none focus:ring-2 focus:ring-brand-500" />
                        <input id="updatePhone" type="text" value="${data.phone_number || ''}" placeholder="S·ªë ƒëi·ªán tho·∫°i"
                            class="w-full px-4 py-2 rounded-lg border border-gray-500 focus:outline-none focus:ring-2 focus:ring-brand-500" />
                    </div>
                    <div class="text-right mt-4">
                        <button id="closeUpdateModal"
                            class="bg-brand-500 text-red px-5 py-2 rounded-lg hover:bg-brand-600 transition shadow"
                            style="color: red;">
                            ‚úñ ƒê√≥ng
                        </button>
                        <button id="submitUpdateModal"
                            class="bg-brand-500 text-black px-5 py-2 rounded-lg hover:bg-brand-600 transition shadow">
                            ‚úÖ C·∫≠p nh·∫≠t
                        </button>
                    </div>
                </div>
            `;
                document.body.appendChild(modal);

                // Attach event listeners
                document.getElementById('closeUpdateModal').addEventListener('click', () => {
                    modal.remove();
                });

                document.getElementById('submitUpdateModal').addEventListener('click', () => {
                    submitUpdate(id, modal);
                });
            })
            .catch(error => {
                console.error('Error opening update modal:', error);
            });
    }

    function submitUpdate(id, modal) {
        const name = document.getElementById('updateName').value;
        const email = document.getElementById('updateEmail').value;
        const phone_number = document.getElementById('updatePhone').value;
        const role = document.getElementById('updateRole').value;

        fetch(`/api/admin/update/${id}`, {
                method: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('access_token'),
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name,
                    email,
                    phone_number,
                    role
                })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    fetchUsers(); // Refresh danh s√°ch ng∆∞·ªùi d√πng

                    // ƒê√≥ng modal c·∫≠p nh·∫≠t
                    modal.remove();

                    // ƒê√≥ng form "Th√™m ng∆∞·ªùi d√πng" n·∫øu n√≥ ƒëang m·ªü
                    const addForm = document.getElementById('addForm');
                    if (addForm && !addForm.classList.contains('hidden')) {
                        addForm.classList.add('hidden');
                    }
                } else {
                    alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating user:', error);
                alert('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng.');
            });
    }
</script>
@endsection